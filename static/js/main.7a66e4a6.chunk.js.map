{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","App","useState","sortType","setSortType","reverse","setReverse","visibleGoods","goods","isReverse","prepareGoods","length","sort","good1","good2","localeCompare","getPrepareGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCK,SAASC,IACd,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAjCR,SAAyBC,EAAOL,EAAUM,GACxC,IAAIC,EAAeF,EAEnB,OAAKL,GAAaM,GAIdC,EAAaC,SACfD,EAAe,YAAIF,GAAOI,MAAK,SAACC,EAAOC,GACrC,OAAQX,GACN,IAAK,iBACH,OAAQU,EAAME,cAAcD,GAE9B,IAAK,SACH,OAAQD,EAAMF,OAASG,EAAMH,OAE/B,QACE,OAAO,OAKXF,IACFC,EAAeA,EAAaL,WAGvBK,GAtBEA,EA6BYM,CAAgBhB,EAAiBG,EAAUE,GAEhE,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBAAkB,CAAE,WAAyB,mBAAbhB,IAElCiB,QAAS,kBAAMhB,EAAY,mBAL7B,iCAUA,wBACEc,KAAK,SACLD,UAAWE,IACT,oBAAqB,CAAE,WAAyB,WAAbhB,IAErCiB,QAAS,kBAAMhB,EAAY,WAL7B,4BAUA,wBACEc,KAAK,SACLD,UAAWE,IACT,oBAAqB,CAAE,YAAad,IAEtCe,QAAS,kBAAMd,GAAYD,IAL7B,sBAUEF,EAASQ,OAAS,GAAKN,IACvB,wBACEa,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPhB,EAAY,IACZE,GAAW,IALf,sBAaJ,6BACGC,EAAac,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,WCpGlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7a66e4a6.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\n\nimport './App.scss';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPrepareGoods(goods, sortType, isReverse) {\n  let prepareGoods = goods;\n\n  if (!sortType && !isReverse) {\n    return prepareGoods;\n  }\n\n  if (prepareGoods.length) {\n    prepareGoods = [...goods].sort((good1, good2) => {\n      switch (sortType) {\n        case 'alphabetically':\n          return (good1.localeCompare(good2));\n\n        case 'length':\n          return (good1.length - good2.length);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    prepareGoods = prepareGoods.reverse();\n  }\n\n  return prepareGoods;\n}\n\nexport function App() {\n  const [sortType, setSortType] = useState('');\n  const [reverse, setReverse] = useState(false);\n\n  const visibleGoods = getPrepareGoods(goodsFromServer, sortType, reverse);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info', { 'is-light': sortType !== 'alphabetically' },\n          )}\n          onClick={() => setSortType('alphabetically')}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success', { 'is-light': sortType !== 'length' },\n          )}\n          onClick={() => setSortType('length')}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning', { 'is-light': !reverse },\n          )}\n          onClick={() => setReverse(!reverse)}\n        >\n          Reverse\n        </button>\n\n        {(sortType.length > 0 || reverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortType('');\n              setReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}